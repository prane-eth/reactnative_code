Creating project:
npm i -g create-react-native-app react-native-router-flux expo
create-react-native-app App1
cd App1
if web is required:
    npx expo install react-native-web@~0.18.9 react-dom@18.1.0 @expo/webpack-config@^0.17.2
npm start  (or)  yarn web


Initial code:

import { StatusBar } from 'expo-status-bar';
import React from 'react';
import { StyleSheet, Text, View } from 'react-native';
export default function App() {
  return (
    <View style={styles.container}>
      <Text> test </Text>
    </View>
  );
}
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
  },
});


using state
  const state = {
    myVar: 'Hello World'
  }
  return (
    <View style={styles.container}>
      <Text> {state.myVar} </Text>
    </View>
  );
--- or ---
.... import React, { useState, useEffect } from 'react';
  const [myVar, setMyVar] = useState('Hello World');
  useEffect(() => {
    setMyVar('Hello World 2');
  }, []);
  return (
    <View style={styles.container}>
      <Text> {myVar} </Text>
    </View>
  );

onPress
      similar to onClick to any div
  <Text onPress={() => setMyVar('Hello World 3')}> {myVar} </Text>
  -- or --
  const buttonClick = () => {
    setMyVar('Hello World 3');
    alert("button clicked");
  };
  <Text onPress={buttonClick}> {myVar} </Text>

TextInput
      similar to input
... import { ..., TextInput } from 'react-native';
  const [myVar, setMyVar] = useState('');
  return (
    <View style={styles.container}>
      <TextInput
        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}
        
        underlineColorAndroid="transparent"       ----> android properties
        placeholder="Enter text here"
        placeholderTextColor="#9a73ef"
        autoCapitalize="none"
        
        onChangeText={text => setMyVar(text)}
        value={myVar}
      />
      <TouchableOpacity onPress={() => setMyVar('')}>
        <Text>Clear</Text>
      </TouchableOpacity>
      <TouchableOpacity onPress={() => alert(myVar)}>
        <Text>Submit</Text>
      </TouchableOpacity>
    </View>
  );


ScrollView
      similar to div with overflow: scroll
... import { ..., ScrollView } from 'react-native';
  const names = {
    {id: 1, name: 'John'},
    ....
  }
  return (
    <View ...>
      <ScrollView>
        {names.map((item, index) => {
          return (
            <View key={item.id} style={...}>
              <Text>{item.name}</Text>
            </View>
          );
        })}
      </ScrollView>
    </View>
  );

Adding images
      similar to img
... import { ..., Image } from 'react-native';
  return (
    <View ...>
      <Image
        style={...}
        source={{ uri: 'https://reactnative.dev/img/tiny_logo.png' }}
        -- or --
        source={require('./assets/icon.png')}
      />
    </View>
  );


fetch method
  useEffect(() => {
    fetch('https://jsonplaceholder.typicode.com/users')
      .then(response => response.json())
      .then(responseJson => {
        setUsersValue(responseJson);
      })
      .catch(error => console.error(error))
      .finally(() => setLoading(false));
  }, []);


Button
      similar to button. can have onPress
... import { ..., Button } from 'react-native';
  const handlePress = () => false;
  return (
    <View ...>
      <Button
        title="Click Here"
        onPress={() => alert('Button Clicked!')}
        -- or --
        onPress={handlePress}
      />
    </View>
  );

TouchableOpacity
      similar to button. changes opacity while pressed or holded
... import { ..., TouchableOpacity } from 'react-native';
  return (
    <View style={styles.container}>
      <TouchableOpacity onPress={() => setMyVar('Hello World 3')}>
        <Text>{myVar}</Text>
      </TouchableOpacity>
    </View>
  );

TouchableHighlight
      similar to button. changes background color to black while pressed or holded
... import { ..., TouchableHighlight } from 'react-native';
  return (
    <View style={styles.container}>
      <TouchableHighlight onPress={() => setMyVar('Hello World 3')}>
        <Text>{myVar}</Text>
      </TouchableHighlight>
    </View>
  );

TouchableNativeFeedback
      simulates ink aniation when pressed
... import { ..., TouchableNativeFeedback } from 'react-native';
  return (
    <View style={styles.container}>
      <TouchableNativeFeedback onPress={() => setMyVar('Hello World 3')}>
        <Text>{myVar}</Text>
      </TouchableNativeFeedback>
    </View>
  );

TouchableWithoutFeedback
      used to handle touch events without any animation. usually not used much

Animated
      used to create animations
... import { ..., Animated } from 'react-native';
  useEffect(() => {
    this.animatedWidth = new Animated.Value(50);
    this.animatedHeight = new Animated.Value(50);
  }, []);
  const animatedBox = () => {
    Animated.timing(this.animatedWidth, {
      toValue: 200,
      duration: 1000
    }).start();
    Animated.timing(this.animatedHeight, {
      toValue: 500,
      duration: 500,
    }).start();
  };
  const animatedStyle = {
    width: this.animatedWidth,
    height: this.animatedHeight
  };
  return (
    <TouchableOpacity style={styles.container} onPress={animatedBox}>
      <Animated.View style={[styles.box, animatedStyle]} />
    </TouchableOpacity>
  );

adding multiple styles
    const newStyle = {
      width: ...
    }
    ... <Animated.View style={[styles.box, animatedStyle]} />



Routing
      similar to react router
  $ npm i react-native-router-flux
  ... import { ..., Router, Scene } from 'react-native-router-flux';
  const Routes = () => (
    <Router>
      <Scene key="root">
        <Scene key="home" component={Home} title="Home" initial={true} />
        <Scene key="about" component={About} title="About" />
      </Scene>
    </Router>
  );

Webview
      similar to iframe
... import { ..., WebView } from 'react-native-webview';
  return (
    <WebView
      source={{ uri: 'https://reactnative.dev/' }}
      style={{ marginTop: 20 }}
    />
  );

Modal
... import { ..., Modal } from 'react-native';
  const [modalVisible, setModalVisible] = useState(false);
  return (
    <View style={styles.centeredView}>
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => {
          Alert.alert("Modal has been closed.");
          setModalVisible(!modalVisible);
        }}
      >
        <View style={styles.centeredView}>
          <View style={styles.modalView}>
            <Text style={styles.modalText}>Hello World!</Text>

            <TouchableHighlight
              style={{ ...styles.openButton, backgroundColor: "#2196F3" }}
              onPress={() => {
                setModalVisible(!modalVisible);
              }}
            >
              <Text style={styles.textStyle}>Hide Modal</Text>
            </TouchableHighlight>
          </View>
        </View>
      </Modal>

      <TouchableHighlight
        style={styles.openButton}
        onPress={() => {
          setModalVisible(true);
        }}
      >
        <Text style={styles.textStyle}>Show Modal</Text>
      </TouchableHighlight>
    </View>
  );

ActivityIndicator
      similar to spinner. displays loading animation
    const [animating, setAnimating] = useState(true);
    var closeActivityIndicatior = () => {
      setTimeout(() => {
        setAnimating(false);
      }, 5000);
    };
    useEffect(() => {
      closeActivityIndicator();
    }, []);
    return (
      <View style={styles.container}>
        <ActivityIndicator
          animating={animating}
          color="#bc2b78"
          size="large"
          style={styles.activityIndicator}
        />
      </View>
    );

Picker
      similar to select
... import { ..., Picker } from 'react-native';
  const [selectedValue, setSelectedValue] = useState("java");
  return (
    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>
      <Picker
        selectedValue={selectedValue}
        style={{ height: 50, width: 100 }}
        onValueChange={(itemValue, itemIndex) => setSelectedValue(itemValue)}
      >
        <Picker.Item label="Java" value="java" />
        <Picker.Item label="JavaScript" value="js" />
      </Picker>
    </View>
  );

StatusBar
... import { ..., StatusBar } from 'react-native';
  return (
    <View style={styles.container}>
      <StatusBar
        barStyle="dark-content"
        hidden={false}
        backgroundColor="#00BCD4"
        translucent={true}
        networkActivityIndicatorVisible={true}
      />
      <Text>Hello World!</Text>
    </View>
  );

Switch
    similar to checkbox of html, toggle switch of android
... import { ..., Switch } from 'react-native';
  const [isEnabled, setIsEnabled] = useState(false);
  const toggleSwitch = () => setIsEnabled(previousState => !previousState);
  return (
    <View style={{ flex: 1, alignItems: "center", justifyContent: "center" }}>
      <Switch
        trackColor={{ false: "#767577", true: "#81b0ff" }}
        thumbColor={isEnabled ? "#f5dd4b" : "#f4f3f4"}
        ios_backgroundColor="#3e3e3e"
        onValueChange={toggleSwitch}
        value={isEnabled}
      />
    </View>
  );



Geolocation
      similar to navigator.geolocation
  const [initialPosition, setInitialPosition] = useState('unknown');
  const [lastPosition, setLastPosition] = useState('unknown');
  var watchID = null;
  useEffect(() => {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        var initialPosition = JSON.stringify(position);
        setInitialPosition(initialPosition);
      },
      (error) => alert(JSON.stringify(error)),
      { enableHighAccuracy: true, timeout: 20000, maximumAge: 1000 }
    );
    this.watchID = navigator.geolocation.watchPosition((position) => {
      var lastPosition = JSON.stringify(position);
      setLastPosition(lastPosition);
    });
    return () => {
      navigator.geolocation.clearWatch(this.watchID);
    };
  }, []);
  return (
    <View style={styles.container}>
      <Text style={styles.welcome}>
        Initial position: {initialPosition}
      </Text>
      <Text style={styles.welcome}>
        Current position: {lastPosition}
      </Text>
    </View>
  );

AsyncStorage
      similar to localStorage
import { AsyncStorage } from '@react-native-async-storage/async-storage';
  const [name, setNameInState] = useState('');
  useEffect(() => {
    AsyncStorage.getItem('name').then((value) => {
      setNameInState(value);
    });
  }, []);
  const setNameInStorage = (value) => {
    AsyncStorage.setItem('name', value);
    setNameInState(value);
  };
  return (
    <View style={styles.container}>
      <TextInput
        style={{ height: 40, borderColor: 'gray', borderWidth: 1 }}
        onChangeText={text => setNameInStorage(text)}
        value={name}
      />
      <Text> {name} </Text>
    </View>
  );